// Generated by CoffeeScript 1.4.0

/*
 * This class is for a collection that extends the Backbone.Paginator
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'backbone'], function($, Backbone) {
    var PaginationView;
    return PaginationView = (function(_super) {

      __extends(PaginationView, _super);

      function PaginationView() {
        return PaginationView.__super__.constructor.apply(this, arguments);
      }

      PaginationView.prototype.tagName = 'div';

      PaginationView.prototype.className = 'btn-group paginated';

      PaginationView.prototype.events = {
        'click button': 'goToPage'
      };

      PaginationView.prototype.initialize = function() {
        return this.listenTo(this.collection, 'sync', this.render);
      };

      PaginationView.prototype.goToPage = function(e) {
        var page;
        page = $(e.currentTarget).data('page');
        return this.collection.goTo(page);
      };

      PaginationView.prototype.render = function() {
        var currentPage, diff, firstPageButton, i, lastPageButton, max, min, nextPageButton, pagesOnEachSideOfCurrent, pagesToShow, prevPageButton, totalPages, _i;
        this.$el.empty();
        totalPages = this.collection.info().totalPages;
        currentPage = this.collection.currentPage;
        if (totalPages < 2) {
          return;
        }
        if (this.options.firstPageButton) {
          firstPageButton = $('<button class="btn btn-default page-nav"/>').data('page', 1).html('<i class="icon-double-angle-left"></i>').appendTo(this.$el);
          if (currentPage < 3) {
            firstPageButton.attr('disabled', 'disabled');
          }
        }
        if (this.options.prevPageButton) {
          prevPageButton = $('<button class="btn btn-default page-nav"/>').data('page', currentPage - 1).html('<i class="icon-angle-left"></i>').appendTo(this.$el);
          if (currentPage < 2) {
            prevPageButton.attr('disabled', 'disabled');
          }
        }
        pagesToShow = this.options.pagesToShow > 0 ? this.options.pagesToShow : 5;
        if (!pagesToShow % 2) {
          pagesToShow++;
        }
        if (totalPages < pagesToShow) {
          min = 1;
          max = totalPages;
        } else {
          pagesOnEachSideOfCurrent = (pagesToShow - 1) / 2;
          min = currentPage - pagesOnEachSideOfCurrent;
          max = currentPage + pagesOnEachSideOfCurrent;
          if (min < 1) {
            diff = 1 - min;
            min = 1;
            max = max + diff;
          } else if (max > totalPages) {
            diff = max - totalPages;
            min = min - diff;
            max = totalPages;
          }
        }
        for (i = _i = min; _i <= max; i = _i += 1) {
          if (i === currentPage) {
            $('<button class="btn btn-primary current-page"/>').data('page', i).attr('disabled', 'disabled').html(i.toString()).appendTo(this.$el);
          } else {
            $('<button class="btn btn-default"/>').data('page', i).html(i.toString()).appendTo(this.$el);
          }
        }
        if (this.options.nextPageButton) {
          nextPageButton = $('<button class="btn btn-default page-nav"/>').data('page', currentPage + 1).html('<i class="icon-angle-right"></i>').appendTo(this.$el);
          if (currentPage >= totalPages) {
            nextPageButton.attr('disabled', 'disabled');
          }
        }
        if (this.options.lastPageButton) {
          lastPageButton = $('<button class="btn btn-default page-nav"/>').data('page', totalPages).html('<i class="icon-double-angle-right"></i>').appendTo(this.$el);
          if (currentPage >= (totalPages - 1)) {
            lastPageButton.attr('disabled', 'disabled');
          }
        }
        return this.delegateEvents();
      };

      return PaginationView;

    })(Backbone.View);
  });

}).call(this);
