// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'core/views/modelRow', 'moment'], function(Backbone, TableRowView, moment) {
    var OrderableCollectionView, _ref;
    return OrderableCollectionView = (function(_super) {
      __extends(OrderableCollectionView, _super);

      function OrderableCollectionView() {
        _ref = OrderableCollectionView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      OrderableCollectionView.prototype.initialize = function() {
        this.listenTo(this.collection, 'add', this.addNew);
        this.listenTo(this.collection, 'sync', this.render);
        return this.listenTo(this.collection, 'sort', this.render);
      };

      OrderableCollectionView.prototype.events = {
        'click .order-by': 'changeOrder'
      };

      OrderableCollectionView.prototype.changeOrder = function(e) {
        var column, currentDirection, direction, isDate;
        _log.info('changing order!');
        e.preventDefault();
        column = $(e.currentTarget).attr('data-column');
        isDate = $(e.currentTarget).attr('data-is-date');
        if (this.collection.sortColumn === column) {
          currentDirection = this.collection.sortDirection;
          direction = currentDirection === 'ASC' ? 'DESC' : 'ASC';
        } else {
          direction = 'ASC';
        }
        this.collection.sortDirection = direction;
        this.collection.sortColumn = column;
        this.$('.order-by i').remove();
        if (direction === 'ASC') {
          this.$('.order-by[data-column="' + column + '"]').append('<i style="margin-left:10px;" class="icon-long-arrow-up"></i>');
        } else {
          this.$('.order-by[data-column="' + column + '"]').append('<i style="margin-left:10px;" class="icon-long-arrow-down"></i>');
        }
        _log.info(direction);
        if ((Backbone.Paginator != null) && this.collection instanceof Backbone.Paginator.requestPager) {
          this.collection.filters.sort_column = column;
          this.collection.filters.sort_direction = direction;
          return this.collection.fetch();
        } else {
          _log.info('Changing comparator');
          this.collection.comparator = function(model1, model2) {
            var model1Val, model2Val, sortVal;
            model1Val = model1.get(column);
            model2Val = model2.get(column);
            if (isDate) {
              model1Val = moment(model1Val).unix();
              model2Val = moment(model2Val).unix();
            } else if (!isNaN(parseFloat(model1Val)) && !isNaN(parseFloat(model2Val))) {
              model1Val = parseFloat(model1Val);
              model2Val = parseFloat(model2Val);
            }
            if (model1Val < model2Val) {
              sortVal = -1;
            } else if (model1Val > model2Val) {
              sortVal = 1;
            } else {
              sortVal = 0;
            }
            if (direction === 'ASC') {
              return sortVal;
            } else {
              return -1 * sortVal;
            }
          };
          this.collection.sort();
          return this.reorder();
        }
      };

      OrderableCollectionView.prototype.reorder = function() {
        var _this = this;
        return this.collection.each(function(obj) {
          return obj.tableRowView.$el.prependTo(_this.$('tbody'));
        });
      };

      OrderableCollectionView.prototype.initialize = function() {
        this.listenTo(this.collection, 'add', this.addNew);
        this.listenTo(this.collection, 'sync', this.render);
        this.subViews = [];
        if (this.collection.sorting == null) {
          return this.collection.sorting = {
            column: null,
            direction: 'ASC'
          };
        }
      };

      OrderableCollectionView.prototype.idPrefix = 'obj-';

      OrderableCollectionView.prototype.modelView = TableRowView;

      OrderableCollectionView.prototype.addNew = function(obj) {
        var before, index, view;
        view = new this.modelView({
          model: obj,
          tagName: 'tr',
          id: this.idPrefix + obj.get('id')
        });
        if (!view.template) {
          view.options.template = this.options.modelTemplate;
        }
        obj.tableRowView = view;
        index = this.collection.indexOf(obj);
        before = this.$('tbody tr:eq(' + index.toString() + ')');
        if (before.length) {
          return before.before(view.render().el);
        } else {
          return this.$('tbody').append(view.render().el);
        }
      };

      OrderableCollectionView.prototype.render = function() {
        var _this = this;
        _log.info('rendering!');
        this.$('tbody').empty();
        return this.collection.each(function(obj) {
          return _this.addNew(obj);
        });
      };

      return OrderableCollectionView;

    })(Backbone.View);
  });

}).call(this);
