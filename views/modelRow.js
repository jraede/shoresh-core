// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'core/views/templated', 'core/views/formModal', 'core/ui/bootstrap/tooltip'], function($, TemplatedView, FormModal) {
    var ModelRow, _ref;
    return ModelRow = (function(_super) {
      __extends(ModelRow, _super);

      function ModelRow() {
        _ref = ModelRow.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ModelRow.prototype.tagName = 'tr';

      ModelRow.prototype.events = {
        'click .delete': 'delete',
        'click .edit': 'edit'
      };

      ModelRow.prototype.initialize = function() {
        return this.listenTo(this.model, 'sync', this.render);
      };

      ModelRow.prototype.deleteMessage = 'Delete this object?';

      ModelRow.prototype.delegateEvents = function() {
        this.$('[title]').tooltip();
        return ModelRow.__super__.delegateEvents.apply(this, arguments);
      };

      ModelRow.prototype["delete"] = function(e) {
        var _this = this;
        e.preventDefault();
        if (confirm(this.deleteMessage)) {
          this.$el.addClass('danger');
          this.$('a, button, input, select, textarea').attr('disabled', 'disabled');
          return this.model.destroy({
            success: function() {
              return _this.remove();
            }
          });
        }
      };

      ModelRow.prototype.edit = function(e) {
        var _this = this;
        if (e) {
          e.preventDefault();
        }
        if (!this.editModal) {
          this.editModal = new FormModal({
            model: this.model,
            template: this.options.template.replace('row', 'modal-form')
          });
          if (this.formFields) {
            this.editModal.options.formFields = this.formFields;
          }
          return this.editModal.render(function() {
            return _this.editModal.show();
          }).$el.appendTo($('body'));
        } else {
          return this.editModal.show();
        }
      };

      return ModelRow;

    })(TemplatedView);
  });

}).call(this);
