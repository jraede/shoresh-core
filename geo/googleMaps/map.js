// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'core/geo/googleMaps/api'], function($, GoogleMaps) {
    var GoogleMap;

    return GoogleMap = (function() {
      GoogleMap.prototype.defaultParams = {
        center: {
          latitude: '34.43036357495847',
          longitude: '-119.76904392242432',
          address: ''
        },
        zoom: 4,
        fitToPoints: false,
        geolocate: {
          geolocate: false,
          marker: {
            show: false,
            image: false
          }
        },
        markers: null,
        mapType: 'hybrid',
        controls: {
          pan: {
            show: false,
            position: 'top right'
          },
          zoom: {
            show: true,
            style: 'default',
            position: 'left center'
          },
          mapType: {
            show: true,
            style: 'default',
            position: 'bottom center'
          },
          scale: {
            show: false,
            position: 'top left'
          },
          streetView: {
            show: false,
            position: 'left top'
          }
        },
        events: {
          click: false,
          dblclick: false,
          mouseup: false,
          mousedown: false,
          mouseover: false,
          mouseout: false
        },
        places: {
          search: false,
          center: false,
          radius: false,
          searchBox: false,
          placeChanged: {
            action: false,
            zoom: 7
          }
        }
      };

      function GoogleMap(el, params) {
        this.element = el;
        this.geocoder = new GoogleMaps.Geocoder();
        this.drawMap(params);
      }

      GoogleMap.prototype.drawMap = function(params) {
        var mapConfig,
          _this = this;

        mapConfig = {
          mapTypeId: false,
          zoom: false,
          panControl: false,
          panControlOptions: {
            position: false
          },
          mapTypeControl: false,
          mapTypeControlOptions: {
            position: false,
            style: false
          },
          zoomControl: false,
          zoomControlOptions: {
            position: false,
            style: false
          },
          scaleControl: false,
          scaleControlOptions: {
            position: false
          },
          streetViewControl: false,
          streetViewControlOptions: {
            position: false
          }
        };
        this.params = $.extend({}, this.defaultParams, params);
        mapConfig.mapTypeId = this.parseType(this.params.mapType);
        mapConfig.zoom = this.params.zoom;
        if (this.params.controls.pan) {
          mapConfig.panControl = this.params.controls.pan.show;
          mapConfig.panControlOptions.position = this.parseControlPosition(this.params.controls.pan.position);
        }
        if (this.params.controls.mapType) {
          mapConfig.mapTypeControl = this.params.controls.mapType.show;
          mapConfig.mapTypeControlOptions.position = this.parseControlPosition(this.params.controls.mapType.position);
          mapConfig.mapTypeControlOptions.style = this.parseTypeControlStyle(this.params.controls.mapType.style);
        }
        if (this.params.controls.zoom) {
          mapConfig.zoomControl = this.params.controls.zoom.show;
          mapConfig.zoomControlOptions.position = this.parseControlPosition(this.params.controls.zoom.position);
          mapConfig.zoomControlOptions.style = this.parseZoomControlStyle(this.params.controls.zoom.style);
        }
        if (this.params.controls.scale) {
          mapConfig.scaleControl = this.params.controls.scale.show;
          mapConfig.scaleControlOptions.position = this.parseControlPosition(this.params.controls.scale.position);
        }
        if (this.params.controls.streetView) {
          mapConfig.streetViewControl = this.params.controls.streetView.show;
          mapConfig.streetViewControlOptions.position = this.parseControlPosition(this.params.controls.streetView.position);
        }
        /*
        			 * Now generate the map
        */

        this.map = new GoogleMaps.Map(this.element, mapConfig);
        if (this.params.center.address) {
          this.geocode(this.params.center.address, function(results) {
            return _this.map.setCenter(results[0].geometry.location);
          });
        } else {
          this.map.setCenter(this.parsePoint(this.params.center.latitude, this.params.center.longitude));
        }
        if (typeof this.params.onClick === 'function') {
          GoogleMaps.event.addListener(this.map, 'click', function(event) {
            return _this.params.onClick(event);
          });
        }
        this.points = [];
        this.markers = [];
        this.parseMarkers();
        /*
        			GoogleMaps.event.addListener(this.map, 'bounds_changed', function() {
             		self.bounds = self.map.getBounds();
             	
        	      	});
        */

        return this.parsePlaces();
      };

      GoogleMap.prototype.parsePlaces = function() {};

      GoogleMap.prototype.parseMarkers = function() {
        var marker, markers, position, _i, _len, _results;

        markers = this.params.markers;
        console.log(markers);
        if (!markers) {
          return;
        }
        _results = [];
        for (_i = 0, _len = markers.length; _i < _len; _i++) {
          marker = markers[_i];
          if (marker.latitude && marker.longitude) {
            position = this.parsePoint(marker.latitude, marker.longitude);
            marker.position = position;
            this.points.push(position);
            _results.push(this.initMarker(marker));
          } else if (marker.address) {
            _results.push(this.geocodeAndAddMarker(marker));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      GoogleMap.prototype.addMarker = function(marker) {
        return this.initMarker(marker);
      };

      GoogleMap.prototype.geocodeAndAddMarker = function(markerConfig) {
        var _this = this;

        console.log('geociding and adding marker');
        return this.geocode(markerConfig.address, function(results) {
          var position;

          position = results[0].geometry.location;
          markerConfig.position = position;
          _this.points.push(position);
          return _this.initMarker(markerConfig);
        });
      };

      GoogleMap.prototype.initMarker = function(markerConfig, centerMapOnMarker) {
        var marker;

        marker = new GoogleMaps.Marker(this.parseMarkerConfig(markerConfig));
        marker.position = markerConfig.position;
        marker.onClick = markerConfig.onClick;
        marker.onMouseOver = markerConfig.onMouseOver;
        marker.onMouseOut = markerConfig.onMouseOut;
        marker.onDoubleClick = markerConfig.onDoubleClick;
        marker.onMouseUp = markerConfig.onMouseUp;
        marker.onMouseDown = markerConfig.onMouseDown;
        marker.map = this.map;
        /*
        			 * Make the info window popup thing
        */

        if (markerConfig.info) {
          marker.infoWindow = new GoogleMaps.InfoWindow({
            content: markerConfig.info.html
          });
          marker.infoWindow.onClose = markerConfig.info.onClose;
          GoogleMaps.event.addListener(marker, 'click', function() {
            return this.infoWindow.open(this.map, this);
          });
          if (markerConfig.info.autoOpen === true) {
            marker.infoWindow.open(this.map, marker);
          }
          if (typeof markerConfig.info.onClose === 'function') {
            GoogleMaps.event.addListener(marker.infoWindow, 'closeclick', function() {
              return this.onClose();
            });
          }
        }
        if (typeof marker.onMouseOver === 'function') {
          GoogleMaps.event.addListener(marker, 'mouseover', function() {
            return this.onMouseOver();
          });
        }
        if (typeof marker.onMouseOut === 'function') {
          GoogleMaps.event.addListener(marker, 'mouseout', function() {
            return this.onMouseOut();
          });
        }
        if (typeof marker.onClick === 'function') {
          GoogleMaps.event.addListener(marker, 'click', function() {
            return this.onClick();
          });
        }
        if (typeof marker.onDoubleClick === 'function') {
          GoogleMaps.event.addListener(marker, 'dblclick', function() {
            return this.onDoubleClick();
          });
        }
        if (typeof marker.onMouseUp === 'function') {
          GoogleMaps.event.addListener(marker, 'mouseup', function() {
            return this.onMouseUp();
          });
        }
        if (typeof marker.onMouseDown === 'function') {
          GoogleMaps.event.addListener(marker, 'mousedown', function() {
            return this.onMouseDown;
          });
        }
        if (this.params.fitToPoints) {
          this.adjustBoundsToFitPoints();
        }
        if (centerMapOnMarker) {
          this.map.setCenter(marker.position);
        }
        this.markers.push(marker);
        return marker;
      };

      GoogleMap.prototype.adjustBoundsToFitPoints = function() {
        var latlngbounds, point, _i, _len, _ref;

        if (this.points.length <= 1) {
          this.map.setCenter(this.points[0]);
          return this.map.setZoom(14);
        } else {
          latlngbounds = new GoogleMaps.LatLngBounds();
          _ref = this.points;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            point = _ref[_i];
            latlngbounds.extend(point);
          }
          return this.map.fitBounds(latlngbounds);
        }
      };

      GoogleMap.prototype.parseMarkerConfig = function(markerConfig) {
        var gmapMarker;

        gmapMarker = {
          map: this.map,
          position: markerConfig.position,
          draggable: markerConfig.draggable,
          icon: markerConfig.image
        };
        if (markerConfig.shadow) {
          gmapMarker.shadow = markerConfig.shadow;
        }
        gmapMarker.animation = this.parseMarkerAnimation(markerConfig.animation);
        return gmapMarker;
      };

      GoogleMap.prototype.geocode = function(address, success) {
        return this.geocoder.geocode({
          address: address
        }, success);
      };

      /*
      		UTILITY METHODS. These translate normal text into Google constants
      */


      GoogleMap.prototype.parsePoint = function(latitude, longitude) {
        return new GoogleMaps.LatLng(latitude, longitude);
      };

      GoogleMap.prototype.parseType = function(type) {
        var gmapType;

        switch (type) {
          case 'satellite':
            gmapType = GoogleMaps.MapTypeId.SATELLITE;
            break;
          case 'hybrid':
            gmapType = GoogleMaps.MapTypeId.HYBRID;
            break;
          case 'terrain':
            gmapType = GoogleMaps.MapTypeId.TERRAIN;
            break;
          default:
            gmapType = GoogleMaps.MapTypeId.ROADMAP;
        }
        return gmapType;
      };

      GoogleMap.prototype.parseZoomControlStyle = function(style) {
        var styleType;

        switch (style) {
          case 'small':
            styleType = GoogleMaps.ZoomControlStyle.SMALL;
            break;
          case 'large':
            styleType = GoogleMaps.ZoomControlStyle.LARGE;
            break;
          default:
            styleType = GoogleMaps.ZoomControlStyle.DEFAULT;
        }
        return styleType;
      };

      GoogleMap.prototype.parseTypeControlStyle = function(style) {
        var styleType;

        switch (style) {
          case 'horizontal bar':
            styleType = GoogleMaps.MapTypeControlStyle.HORIZONTAL_BAR;
            break;
          case 'dropdown menu':
            styleType = GoogleMaps.MapTypeControlStyle.DROPDOWN_MENU;
            break;
          default:
            styleType = GoogleMaps.MapTypeControlStyle.DEFAULT;
        }
        return styleType;
      };

      GoogleMap.prototype.parseControlPosition = function(position) {
        var positionReturn;

        switch (position) {
          case 'top right':
            positionReturn = GoogleMaps.ControlPosition.TOP_RIGHT;
            break;
          case 'top center':
            positionReturn = GoogleMaps.ControlPosition.TOP_CENTER;
            break;
          case 'top left':
            positionReturn = GoogleMaps.ControlPosition.TOP_LEFT;
            break;
          case 'left top':
            positionReturn = GoogleMaps.ControlPosition.LEFT_TOP;
            break;
          case 'left center':
            positionReturn = GoogleMaps.ControlPosition.LEFT_CENTER;
            break;
          case 'left bottom':
            positionReturn = GoogleMaps.ControlPosition.LEFT_BOTTOM;
            break;
          case 'bottom left':
            positionReturn = GoogleMaps.ControlPosition.BOTTOM_LEFT;
            break;
          case 'bottom center':
            positionReturn = GoogleMaps.ControlPosition.BOTTOM_CENTER;
            break;
          case 'bottom right':
            positionReturn = GoogleMaps.ControlPosition.BOTTOM_RIGHT;
            break;
          case 'right bottom':
            positionReturn = GoogleMaps.ControlPosition.RIGHT_BOTTOM;
            break;
          case 'right center':
            positionReturn = GoogleMaps.ControlPosition.RIGHT_CENTER;
            break;
          case 'right top':
            positionReturn = GoogleMaps.ControlPosition.RIGHT_TOP;
        }
        return positionReturn;
      };

      GoogleMap.prototype.parseMarkerAnimation = function(animation) {
        var markerAnimation;

        switch (animation) {
          case 'drop':
            markerAnimation = GoogleMaps.Animation.DROP;
            break;
          case 'bounce':
            markerAnimation = GoogleMaps.Animation.BOUNCE;
            break;
          default:
            markerAnimation = false;
        }
        return markerAnimation;
      };

      return GoogleMap;

    })();
  });

}).call(this);
