// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'components/file/html5upload/file'], function(Backbone, FileModel) {
    var FileCollection, _ref;

    return FileCollection = (function(_super) {
      __extends(FileCollection, _super);

      function FileCollection() {
        _ref = FileCollection.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      FileCollection.prototype.model = FileModel;

      FileCollection.prototype.totalFiles = function() {
        return this.where({
          status: 'pending'
        }).length + this.where({
          status: 'complete'
        }).length;
      };

      FileCollection.prototype.pendingCount = function() {
        return this.where({
          status: 'pending'
        }).length;
      };

      FileCollection.prototype.setup = function(options) {
        this.element.get(0).uploader = this;
        return this.element.css('height', '0px').css('width', '0px').attr('multiple', 'multiple').change(function() {
          var file, fileObject, files, type, _i, _len;

          files = this.files;
          console.log('PARAMS:', this.uploader.params.max, files.length, 'total files', this.uploader.totalFiles());
          if (this.uploader.params.max && (files.length + this.uploader.totalFiles()) > this.uploader.params.max) {
            return this.uploader.trigger('tooManyFiles');
          } else {
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              file = files[_i];
              type = file.type;
              if (this.uploader.params.validTypes && this.uploader.params.validTypes.indexOf(type) < 0) {
                this.uploader.trigger('invalidType');
              } else {
                fileObject = new FileModel({
                  file: file
                });
                this.uploader.add(fileObject);
                if (this.uploader.params.autoUpload) {
                  fileObject.upload();
                }
              }
            }
            return this.value = '';
          }
        });
      };

      FileCollection.prototype.showDialog = function() {
        return this.element.trigger('click');
      };

      FileCollection.prototype.upload = function() {
        return this.each(function(file) {
          return file.upload();
        });
      };

      return FileCollection;

    })(Backbone.Collection);
  });

}).call(this);
