// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'backbone'], function($, Backbone) {
    var UploadFile, _ref;

    return UploadFile = (function(_super) {
      __extends(UploadFile, _super);

      function UploadFile() {
        _ref = UploadFile.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      UploadFile.prototype.defaults = {
        status: 'pending',
        file: null,
        name: null,
        size: null,
        type: null
      };

      UploadFile.prototype.initialize = function() {
        var file;

        if (this.get('file')) {
          file = this.get('file');
          if (!file.size > (1024 * 1024)) {
            this.size = (Math.round(file.size * 100 / (1024 * 1024)) / 100).toString() + 'MB';
          } else {
            this.size = (Math.round(file.size * 100 / 1024) / 100).toString() + 'KB';
          }
          this.set('name', file.name);
          this.set('type', file.type);
          this.set('size', file.size);
        }
        if (this.get('status') === 'complete') {
          this.set('progress', 100.0);
        } else {
          this.set('progress', 0.0);
        }
        return UploadFile.__super__.initialize.apply(this, arguments);
      };

      UploadFile.prototype.upload = function() {
        var xhr,
          _this = this;

        if (this.get('status') === 'complete') {
          return;
        }
        if (!this.get('file')) {
          alert('Cannot upload with no file');
        }
        this.set('status', 'uploading');
        xhr = new XMLHttpRequest();
        if (xhr.upload) {
          xhr.upload.addEventListener('progress', function(event) {
            return _this.progress(event);
          }, false);
        }
        xhr.addEventListener('error', function(error, exception) {
          return _this.error(error, exception);
        }, false);
        xhr.addEventListener('abort', function() {
          return _this.canceled();
        }, false);
        xhr.addEventListener('load', function(data) {
          return _this.complete($.parseJSON(xhr.responseText), xhr.status);
        }, false);
        this.set('status', 'uploading');
        xhr.open('POST', this.collection.params.url);
        xhr.setRequestHeader('X_FILENAME', this.get('name'));
        return xhr.send(this.get('file'));
      };

      UploadFile.prototype.progress = function(event) {
        var percentComplete;

        if (event.lengthComputable) {
          percentComplete = Math.round(event.loaded * 100 / event.total);
          return this.set('progress', percentComplete);
        }
      };

      UploadFile.prototype.complete = function(response, status) {
        if (status === 200 || status === 201) {
          this.set('response', response);
          return this.set('status', 'complete');
        } else {
          this.set('error', status);
          return this.set('status', 'error');
        }
      };

      UploadFile.prototype.canceled = function() {
        return this.set('status', 'canceled');
      };

      UploadFile.prototype.error = function(error, exception) {
        this.set('status', 'error');
        return this.set('error', error);
      };

      return UploadFile;

    })(Backbone.Model);
  });

}).call(this);
