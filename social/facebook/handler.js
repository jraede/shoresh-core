// Generated by CoffeeScript 1.6.2
/*
 * Facebook Connect
 *
 * Handles connecting to Facebook and displaying data.
 *
 * All requests from any of those objects to another 
 * object run through this object.
 *
 * @package Shoresh
 * @subpackage  Social
 * @author Jason Raede
*/


(function() {
  define(['core/social/facebook/api', 'core/social/facebook/user', 'core/social/facebook/connect'], function(FBApi, FBUser, FB) {
    var FacebookConnect;

    return FacebookConnect = (function() {
      function FacebookConnect() {}

      FacebookConnect.events = {
        userLoggedIn: [],
        userNotLoggedIn: [],
        loginSuccessful: [],
        loginFailed: [],
        loggedOut: []
      };

      FacebookConnect.bindEvent = function(event, callback) {
        return this.events[event].push(callback);
      };

      FacebookConnect.unbind = function(event) {
        return this.events[event] = [];
      };

      FacebookConnect.triggerEvent = function(event, args) {
        var callback, _i, _len, _ref, _results;

        __.log('triggering facebook event: ' + event);
        if (this.events[event]) {
          _ref = this.events[event];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            callback = _ref[_i];
            _results.push(callback(args));
          }
          return _results;
        }
      };

      FacebookConnect.currentUser = null;

      FacebookConnect.fetchedUser = false;

      FacebookConnect.retrievingUserData = false;

      FacebookConnect.initialized = false;

      FacebookConnect.initCallbacks = [];

      FacebookConnect.executeInitCallbacks = function() {
        var callback, _i, _len, _ref;

        __.log('executing init callbacks');
        _ref = this.initCallbacks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          callback = _ref[_i];
          this.loggedIn(callback);
        }
        return this.initCallbacks = [];
      };

      FacebookConnect.userInfoCallbacks = [];

      FacebookConnect.executeUserInfoCallbacks = function() {
        var callback, _i, _len, _ref, _results;

        _ref = this.userInfoCallbacks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          callback = _ref[_i];
          _results.push(this.getUserInfo(callback.field, callback.callback));
        }
        return _results;
      };

      FacebookConnect.initialize = function(appId, channelUrl) {
        var _this = this;

        return FBApi.initialize(appId, channelUrl, function(response) {
          if (response.authResponse && response.authResponse.accessToken) {
            _this.didLogin(response);
            return _this.triggerEvent('userLoggedIn');
          } else {
            _this.initialized = true;
            _this.executeInitCallbacks();
            return _this.triggerEvent('userNotLoggedIn');
          }
        });
      };

      FacebookConnect.loggedIn = function(callback) {
        if (!this.initialized) {
          return this.initCallbacks.push(callback);
        } else {
          return callback(this.currentUser ? this.currentUser.id : false);
        }
      };

      FacebookConnect.didLogin = function(response) {
        this.initialized = true;
        this.currentUser = new FBUser(response.authResponse.userID);
        return this.executeInitCallbacks();
      };

      FacebookConnect.postToWall = function(story, complete) {
        story.method = 'feed';
        return FB.ui(story, complete);
      };

      FacebookConnect.login = function(scope, success, error) {
        var _this = this;

        return FBApi.login(scope, function(response) {
          if (response.authResponse && response.authResponse.accessToken) {
            _this.didLogin(response);
            _this.triggerEvent('loginSuccessful');
            if (success) {
              return success(response);
            }
          } else {
            _this.triggerEvent('loginFailed');
            if (error) {
              return error(response);
            }
          }
        });
      };

      FacebookConnect.logout = function(callback) {
        var _this = this;

        return FBApi.logout(function() {
          if (callback) {
            callback();
          }
          _this.currentUser = null;
          return _this.triggerEvent('loggedOut');
        });
      };

      FacebookConnect.getUserInfo = function(field, callback) {
        var _this = this;

        if (this.fetchedUser && this.currentUser[field]) {
          return callback(this.currentUser[field]);
        } else if (this.retrievingUserData) {
          return this.userInfoCallbacks.push({
            field: field,
            callback: callback
          });
        } else {
          this.retrievingUserData = true;
          return this.apiCall('/' + this.currentUser.id, function() {
            _this.currentUser = response;
            _this.retrievingUserData = false;
            _this.fetchedUser = true;
            _this.executeUserInfoCallbacks();
            return callback(_this.currentUser[field]);
          });
        }
      };

      return FacebookConnect;

    })();
  });

}).call(this);
