// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'core/form/validator'], function(Backbone, Validator) {
    var Field, _ref;

    return Field = (function(_super) {
      __extends(Field, _super);

      function Field() {
        _ref = Field.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Field.prototype.tagName = 'div';

      Field.prototype.className = 'form-group';

      Field.prototype.form = null;

      Field.prototype.initialize = function() {
        Field.__super__.initialize.apply(this, arguments);
        return this.validator = new Validator(this.options.rules, this);
      };

      /*
      		 * Override this method to get the value of the field that will get
      		 * set on the model
      */


      Field.prototype.getValue = function() {
        return this.$el.find('input').val();
      };

      Field.prototype.postRender = function() {
        console.log('running post render on', this);
        return this.populateSelf();
      };

      Field.prototype.populateModel = function() {
        var property;

        property = this.options.property;
        return this.model.set(property, this.getValue());
      };

      Field.prototype.populateSelf = function() {
        var property, val;

        console.log('running populate self');
        property = this.options.property;
        val = this.model.get(property);
        return this.$('input').val(val);
      };

      Field.prototype.displayErrors = function(errors) {
        var error, _i, _len, _results;

        _results = [];
        for (_i = 0, _len = errors.length; _i < _len; _i++) {
          error = errors[_i];
          _results.push(this.form.displayError(this.options.property, error));
        }
        return _results;
      };

      Field.prototype.validate = function(suppressErrors) {
        if (this.validator.run(this.getValue())) {
          return true;
        } else if (!suppressErrors) {
          this.displayErrors(this.validator.errors);
        }
        return false;
      };

      return Field;

    })(Backbone.View);
  });

}).call(this);
