// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'core/form/field'], function($, Field) {
    var Checkbox, _ref;

    return Checkbox = (function(_super) {
      __extends(Checkbox, _super);

      function Checkbox() {
        _ref = Checkbox.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Checkbox.prototype.tagName = 'div';

      Checkbox.prototype.render = function() {
        var label;

        label = $('<label/>').html(this.options.label).appendTo(this.$el);
        if (this.options.help) {
          $('<p class="help-block"/>').html(this.options.help).insertAfter(label);
        }
        this.postRender();
        return this.$el;
      };

      Checkbox.prototype.postRender = function() {
        var div, label, labelEl, val, _i, _len, _ref1, _ref2, _results, _results1;

        Checkbox.__super__.postRender.apply(this, arguments);
        if (!this.$('input[type="checkbox"]').length) {
          if (this.options.options instanceof Array) {
            _ref1 = this.options.options;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              val = _ref1[_i];
              div = $('<div class="checkbox"/>').appendTo(this.$el);
              labelEl = $('<label class="checkbox"/>').html(val).appendTo(div);
              _results.push($('<input type="checkbox"/>').val(val).attr('name', this.options.property + '[]').prependTo(labelEl));
            }
            return _results;
          } else if (typeof this.options.options === 'object') {
            _ref2 = this.options.options;
            _results1 = [];
            for (val in _ref2) {
              label = _ref2[val];
              div = $('<div class="checkbox"/>').appendTo(this.$el);
              labelEl = $('<label class="checkbox"/>').html(label).appendTo(div);
              _results1.push($('<input type="checkbox"/>').val(val).attr('name', this.options.property + '[]').prependTo(labelEl));
            }
            return _results1;
          }
        }
      };

      Checkbox.prototype.getValue = function() {
        var value;

        value = [];
        this.$('input:checked').each(function() {
          return value.push($(this).val());
        });
        return value;
      };

      Checkbox.prototype.populateSelf = function() {
        var property, val, value, _i, _len, _results;

        property = this.options.property;
        val = this.model.get(property);
        if (val instanceof Array) {
          _results = [];
          for (_i = 0, _len = val.length; _i < _len; _i++) {
            value = val[_i];
            _results.push(this.$('input[value="' + value + '"]').attr('checked', 'checked'));
          }
          return _results;
        } else {
          return this.$('input[value="' + val + '"]').attr('checked', 'checked');
        }
      };

      return Checkbox;

    })(Field);
  });

}).call(this);
