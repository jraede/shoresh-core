// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['components/file/html5upload/fileCollectionView', 'components/form/fields/upload/fileView'], function(FileCollectionView, FileView) {
    var FormFileCollectionView, _ref;

    return FormFileCollectionView = (function(_super) {
      __extends(FormFileCollectionView, _super);

      function FormFileCollectionView() {
        _ref = FormFileCollectionView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      FormFileCollectionView.prototype.tagName = 'div';

      FormFileCollectionView.prototype.render = function() {
        var buttonGroup,
          _this = this;

        FormFileCollectionView.__super__.render.apply(this, arguments);
        this.listenTo(this.collection, 'change:status', this.updateUI);
        this.listenTo(this.collection, 'remove', this.updateUI);
        this.fileContainer = $('<ul/>').addClass('upload-file-container').appendTo(this.$el);
        buttonGroup = $('<div class="btn-group"/>').appendTo(this.$el);
        this.chooseFileButton = $('<button/>').addClass('choose btn btn-default').html('<i class="icon-file"></i> Choose File(s)').click(function(e) {
          e.preventDefault();
          return _this.showDialog();
        }).appendTo(buttonGroup);
        if (!this.options.config.autoUpload) {
          this.uploadButton = $('<button/>').addClass('upload btn btn-default').html('<i class="icon-upload"></i> Upload').attr('disabled', 'disabled').click(function(e) {
            e.preventDefault();
            return _this.collection.upload();
          }).appendTo(buttonGroup);
        }
        return this.messageContainer = $('<div/>').insertBefore(this.fileContainer);
      };

      FormFileCollectionView.prototype.addFile = function(file) {
        this.updateUI();
        file.view = new FileView({
          model: file
        });
        file.view.render();
        file.view.$el.appendTo(this.fileContainer);
        return this.fileContainer.show();
      };

      FormFileCollectionView.prototype.updateUI = function() {
        if (this.options.config.max > 0 && this.collection.length === this.options.config.max) {
          this.chooseFileButton.attr('disabled', 'disabled');
        } else {
          this.chooseFileButton.attr('disabled', false);
        }
        if (!this.options.config.autoUpload && this.collection.pendingCount()) {
          return this.uploadButton.attr('disabled', false);
        } else {
          return this.uploadButton.attr('disabled', 'disabled');
        }
      };

      FormFileCollectionView.prototype.showError = function(error) {
        var p;

        return p = $('<p class="alert alert-danger"/>').hide().html(error).prependTo(this.messageContainer).slideDown(100, function() {
          var _this = this;

          return setTimeout(function() {
            return p.slideUp(100, function() {
              return p.remove();
            });
          }, 2000);
        });
      };

      FormFileCollectionView.prototype.invalidType = function() {
        return this.showError('Invalid file type!');
      };

      FormFileCollectionView.prototype.tooManyFiles = function() {
        return this.showError('Error: too many files! (Max is ' + this.options.config.max + ')');
      };

      return FormFileCollectionView;

    })(FileCollectionView);
  });

}).call(this);
