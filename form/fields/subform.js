// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'core/form/field', 'backbone', 'core/ui/template'], function($, Field, Backbone, Template) {
    var SubForm;
    return SubForm = (function(_super) {

      __extends(SubForm, _super);

      function SubForm() {
        return SubForm.__super__.constructor.apply(this, arguments);
      }

      SubForm.prototype.render = function() {
        var label;
        label = $('<label/>').html(this.options.label).appendTo(this.$el);
        if (this.options.help) {
          $('<p class="help-block"/>').html(this.options.help).insertAfter(label);
        }
        this.postRender();
        return this.$el;
      };

      SubForm.prototype.postRender = function() {
        var url,
          _this = this;
        if (this.options.url && typeof this.options.url === 'function') {
          url = _.bind(this.options.url, this.model)();
        } else {
          url = this.options.url;
        }
        console.log('got url:', url);
        this.collection = new Backbone.Collection;
        this.collection.model = this.options.modelClass;
        this.collection.url = url;
        console.log('collection,', this.collection);
        this.forms = [];
        this.$el.css({
          position: 'relative'
        });
        this.addButton = $('<button class="btn btn-success btn-small pull-right"/>').css({
          position: 'absolute',
          top: '0px',
          right: '0px',
          '-moz-border-radius-bottom-right': '0px',
          '-webkit-border-bottom-right-radius': '0px',
          'border-bottom-right-radius': '0px',
          '-moz-border-radius-top-left': '0px',
          '-webkit-border-top-left-radius': '0px',
          'border-top-left-radius': '0px'
        }).html('<i class="icon-plus"></i>').click(function(e) {
          console.log('clicked on add button');
          e.preventDefault();
          return _this.addNewModel();
        }).prependTo(this.$el);
        this.ul = $('<ul class="list-group"/>').appendTo(this.$el);
        this.listenTo(this.model, 'sync', this.saveModels);
        this.listenTo(this.collection, 'add', this.showNewModel);
        return SubForm.__super__.postRender.apply(this, arguments);
      };

      SubForm.prototype.populateSelf = function() {
        var obj, property, val, _i, _len, _results;
        if (this.options.getModelsViaAPI === true) {
          return this.collection.fetch();
        } else {
          property = this.options.property;
          val = this.model.get(property);
          if (val instanceof Array) {
            _results = [];
            for (_i = 0, _len = val.length; _i < _len; _i++) {
              obj = val[_i];
              _results.push(this.addNewModel(obj));
            }
            return _results;
          }
        }
      };

      SubForm.prototype.addNewModel = function(attr) {
        var ModelClass, key, model, val;
        ModelClass = this.options.modelClass;
        if (!(attr instanceof ModelClass)) {
          model = new ModelClass;
          if (attr && typeof attr === 'object') {
            for (key in attr) {
              val = attr[key];
              model.set(key, val);
            }
          }
        } else {
          model = attr;
        }
        return this.collection.add(model);
      };

      SubForm.prototype.showNewModel = function(model) {
        var form, view,
          _this = this;
        if (this.options.template) {
          return Template.load(this.options.template, function(view) {
            var form;
            view = $('<li class="list-group-item"/>').css('position', 'relative').html(_.template(view)).prependTo(_this.ul);
            form = model.generateForm(view);
            form.saveOnProcess = false;
            form.render(function() {
              var removeButton;
              return removeButton = $('<button class="btn btn-danger btn-small pull-right"/>').css({
                position: 'absolute',
                top: '0px',
                right: '0px',
                '-moz-border-radius-bottom-right': '0px',
                '-webkit-border-bottom-right-radius': '0px',
                'border-bottom-right-radius': '0px',
                '-moz-border-radius-top-left': '0px',
                '-webkit-border-top-left-radius': '0px',
                'border-top-left-radius': '0px'
              }).html('<i class="icon-remove"></i>').data('form', form).click(function(e) {
                var button;
                e.preventDefault();
                button = $(e.currentTarget);
                return _this.removeForm(button.data('form'));
              }).prependTo(form.$el);
            });
            return _this.forms.push(form);
          });
        } else {
          view = $('<li class="list-group-item"/>').css('position', 'relative').prependTo(this.ul);
          form = model.generateForm(view);
          form.saveOnProcess = false;
          form.render(function() {
            var removeButton;
            return removeButton = $('<button class="btn btn-danger btn-small pull-right"/>').css({
              position: 'absolute',
              top: '0px',
              right: '0px',
              '-moz-border-radius-bottom-right': '0px',
              '-webkit-border-bottom-right-radius': '0px',
              'border-bottom-right-radius': '0px',
              '-moz-border-radius-top-left': '0px',
              '-webkit-border-top-left-radius': '0px',
              'border-top-left-radius': '0px'
            }).html('<i class="icon-remove"></i>').data('form', form).click(function(e) {
              var button;
              e.preventDefault();
              button = $(e.currentTarget);
              return _this.removeForm(button.data('form'));
            }).prependTo(form.$el);
          });
          return this.forms.push(form);
        }
      };

      SubForm.prototype.removeForm = function(form) {
        var model;
        model = form.model;
        if (!model.isNew()) {
          if (!confirm('Are you sure?')) {
            return;
          }
        }
        form.remove();
        if (this.options.destroyModelOnRemove === true) {
          return model.destroy();
        }
      };

      SubForm.prototype.validate = function(suppressErrors) {
        var form, validated, _i, _len, _ref;
        validated = true;
        _ref = this.forms;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          form = _ref[_i];
          console.log('about to process form:', form);
          if (!form.process()) {
            validated = false;
          }
        }
        return validated;
      };

      SubForm.prototype.saveModels = function() {
        var form, keyFrom, keyTo, _i, _len, _ref, _results;
        console.log('saving models');
        keyFrom = this.options.keyFrom;
        keyTo = this.options.keyTo;
        _ref = this.forms;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          form = _ref[_i];
          form.model.set(keyTo, this.model.get(keyFrom));
          _results.push(form.model.save());
        }
        return _results;
      };

      return SubForm;

    })(Field);
  });

}).call(this);
