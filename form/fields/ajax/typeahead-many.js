// Generated by CoffeeScript 1.6.2
/*
 * This class creates a bootstrap typeahead element
 * with an AJAX data source for either a has_many or 
 * many_many relationship with the main model.
 *
 * The main model's API should return an array of objects 
 * with properties "id" and "label" so that this field can 
 * be pre-populated, and the data source for this field should 
 * return the same format.
 *
 * E.g,
 *
 * [
 * 	{id:1, label:'Object 1'},
 * 	{id:2, label:'Object 2'}
 * ]
 *
 * The pre-existing and chosen values are shown in a UL with
 * a remove button.
 *
 * The actual API can handle this field either as a has_many 
 * or many_many relationship, it it exactly the same from a 
 * front-end standpoint
 *
 * You optionally can specify a "display" property in the field 
 * config as a function that takes the LI element and the object 
 * label and performs any additional UI process on it.
 * 
 *
 * @package  Shoresh
 * @subpackage  Form
 * @author  Jason Raede <j@jasonraede.com>
 * 
 * -------------
 * Requirements:
 * -------------
 *
 * Twitter Bootstrap Typeahead
 * @url  http://twitter.github.io/bootstrap/javascript.html
 *
 * Twitter Bootstrap CSS
 * @url  http://twitter.github.io/bootstrap/index.html
 *
 * Font Awesome (for default "remove" button icon)
 * @url  http://fortawesome.github.io/Font-Awesome/
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['core/form/field', 'jquery', 'core/ui/bootstrap/typeahead'], function(Field, $) {
    var TypeaheadAjaxMany;

    return TypeaheadAjaxMany = (function(_super) {
      __extends(TypeaheadAjaxMany, _super);

      function TypeaheadAjaxMany() {
        TypeaheadAjaxMany.__super__.constructor.apply(this, arguments);
        this.value = [];
      }

      TypeaheadAjaxMany.prototype.render = function() {
        var input, label;

        label = $('<label/>').html(this.options.label).appendTo(this.$el);
        input = $('<input type="text" class="form-control"/>').appendTo(this.$el);
        if (this.options.help) {
          $('<p class="help-block"/>').html(this.options.help).insertBefore(input);
        }
        this.postRender();
        return this.$el;
      };

      TypeaheadAjaxMany.prototype.postRender = function() {
        var _this = this;

        this.searchField = this.$('input[type="text"]');
        this.ul = $('<ul class="list-group"/>').appendTo(this.$el);
        this.searchField.typeahead({
          source: function(query, process) {
            return $.getJSON(_this.options.dataSourceUrl, {
              q: query
            }, function(response) {
              var existing, result, results, _i, _len;

              results = [];
              existing = _.pluck(_this.value, 'id');
              console.log('EXISTING:', existing);
              for (_i = 0, _len = response.length; _i < _len; _i++) {
                result = response[_i];
                if (existing.indexOf(result.id.toString()) < 0) {
                  results.push(result.id + '@@@@' + result.label);
                }
              }
              return process(results);
            });
          },
          highlighter: function(item) {
            var parts;

            parts = item.split('@@@@');
            parts.shift();
            return parts.join('@@@@');
          },
          updater: function(item) {
            var id, label, parts;

            parts = item.split('@@@@');
            id = parts.shift();
            label = parts.shift();
            _this.addValue(id, label);
            return parts.join('@@@@');
          }
        });
        return TypeaheadAjaxMany.__super__.postRender.apply(this, arguments);
      };

      TypeaheadAjaxMany.prototype.getValue = function() {
        return this.value;
      };

      TypeaheadAjaxMany.prototype.addValue = function(id, label) {
        var li, removeButton,
          _this = this;

        this.value.push({
          id: id,
          label: label
        });
        if (this.options.display && typeof this.options.display === 'function') {
          li = this.options.display($('<li class="list-group-item"/>').appendTo(this.ul), label);
        } else {
          li = $('<li class="list-group-item"/>').html(label).appendTo(this.ul);
        }
        removeButton = $('<button/>').addClass('btn btn-danger btn-small remove pull-right').html('<i class="icon-remove"></i>').data('id', id).click(function(e) {
          var button;

          e.preventDefault();
          button = $(e.currentTarget);
          _this.removeValue(button.data('id'));
          return button.parent('li').remove();
        });
        return removeButton.appendTo(li);
      };

      TypeaheadAjaxMany.prototype.removeValue = function(id) {
        var key, obj, _i, _len, _ref;

        _ref = this.value;
        for (key = _i = 0, _len = _ref.length; _i < _len; key = ++_i) {
          obj = _ref[key];
          if (obj.id === id) {
            this.value = _.without(this.value, obj);
            return;
          }
        }
      };

      TypeaheadAjaxMany.prototype.populateSelf = function() {
        var current, property, val, _i, _len, _results;

        property = this.options.property;
        val = this.model.get(property);
        if (typeof val === 'array') {
          _results = [];
          for (_i = 0, _len = val.length; _i < _len; _i++) {
            current = val[_i];
            _results.push(this.addValue(current.id, current.label));
          }
          return _results;
        }
      };

      return TypeaheadAjaxMany;

    })(Field);
  });

}).call(this);
