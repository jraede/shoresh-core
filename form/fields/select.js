// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'core/form/field'], function($, Field) {
    var Select, _ref;

    return Select = (function(_super) {
      __extends(Select, _super);

      function Select() {
        _ref = Select.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Select.prototype.render = function() {
        var label;

        label = $('<label/>').html(this.options.label).appendTo(this.$el);
        if (this.options.help) {
          $('<p class="help-block"/>').html(this.options.help).insertAfter(label);
        }
        this.postRender();
        return this.$el;
      };

      Select.prototype.postRender = function() {
        var label, select, val, _i, _len, _ref1, _ref2, _results, _results1;

        Select.__super__.postRender.apply(this, arguments);
        if (!this.$('select').length) {
          select = $('<select class="form-control"/>').appendTo(this.$el);
        } else {
          select = this.$('select');
        }
        if (this.options.options && !this.$('select option').length) {
          if (this.options.options instanceof Array) {
            _ref1 = this.options.options;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              val = _ref1[_i];
              _results.push($('<option/>').val(val).html(val).appendTo(select));
            }
            return _results;
          } else if (typeof this.options.options === 'object') {
            _ref2 = this.options.options;
            _results1 = [];
            for (val in _ref2) {
              label = _ref2[val];
              _results1.push($('<option/>').val(val).html(label).appendTo(select));
            }
            return _results1;
          }
        }
      };

      Select.prototype.getValue = function() {
        return this.$el.find('select').val();
      };

      Select.prototype.populateSelf = function() {
        var property, val;

        property = this.options.property;
        val = this.model.get(property);
        return this.$('select').val(val);
      };

      return Select;

    })(Field);
  });

}).call(this);
