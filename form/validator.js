// Generated by CoffeeScript 1.6.2
(function() {
  define([], function() {
    var Validator;

    return Validator = (function() {
      Validator.prototype.field = null;

      Validator.prototype.rules = null;

      Validator.prototype.errors = null;

      function Validator(rules, field) {
        this.field = field;
        this.rules = rules;
        this.errors = [];
      }

      Validator.prototype.run = function(value) {
        var params, rule, _ref;

        this.errors = [];
        _ref = this.rules;
        for (rule in _ref) {
          params = _ref[rule];
          if (!this.runRule(rule, params, value)) {
            this.errors.push(rule);
          }
        }
        if (this.errors.length) {
          return false;
        }
        return true;
      };

      Validator.prototype.runRule = function(rule, params, value) {
        var result;

        if (typeof params === 'function') {
          return params(value);
        } else if (typeof this['_rule_' + rule] === 'function') {
          result = this['_rule_' + rule](value, params);
          return result;
        }
        return false;
      };

      Validator.prototype._rule_required = function(value) {
        if (value && value !== ('' != null)) {
          return true;
        }
        return false;
      };

      Validator.prototype._rule_minLength = function(value, length) {
        value = value.toString();
        if (!value || value.length < length) {
          return false;
        }
        return true;
      };

      Validator.prototype._rule_maxLength = function(value, length) {
        value = value.toString();
        if (value && value.length > length) {
          return false;
        }
        return true;
      };

      Validator.prototype._rule_matchRegex = function(value, regex) {
        var match;

        if (!(regex instanceof RegExp)) {
          console.error('Argument for matchRegex is not a RegExp object');
          return false;
        }
        match = value.toString().match(regex);
        if (match !== null && value === match[0]) {
          return true;
        }
        return false;
      };

      Validator.prototype._rule_validEmail = function(value) {
        var regex;

        regex = /^[\w\-\.\+]+\@[a-zA-Z0-9\.\-]+\.[a-zA-z0-9]{2,4}$/;
        if (value.match(regex)) {
          return true;
        } else {
          return false;
        }
      };

      Validator.prototype._rule_validUrl = function(value) {
        var regex;

        regex = /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/gi;
        return this._rule_matchRegex(value, regex);
      };

      Validator.prototype._rule_matchField = function(value, field) {
        var otherField;

        otherField = this.field.form.fields[field];
        if (otherField) {
          if (otherField.value() === value) {
            return true;
          }
          return false;
        }
        console.error('Other field for _rule_matchField not found!');
        return false;
      };

      return Validator;

    })();
  });

}).call(this);
