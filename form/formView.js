// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'backbone', 'components/form/fieldFactory', 'underscore'], function($, Backbone, FieldFactory, _) {
    var FormView, _ref;

    return FormView = (function(_super) {
      __extends(FormView, _super);

      function FormView() {
        _ref = FormView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      FormView.prototype.tagName = 'form';

      FormView.prototype.fields = null;

      FormView.prototype.saveOnProcess = true;

      FormView.prototype.events = {
        'click input[type="submit"]': 'process'
      };

      FormView.prototype.displayError = function(field, error) {
        var fieldEl, message, p;

        fieldEl = this.fields[field].$el;
        fieldEl.addClass('has-error');
        message = this.model.getErrorMessage(field, error);
        p = $('<p class="alert alert-danger"/>').html(message).prependTo(fieldEl);
        return setTimeout(function() {
          return p.remove();
        }, 2000);
      };

      FormView.prototype.fieldOrder = null;

      FormView.prototype.formPreRendered = false;

      FormView.prototype.reorderFields = function() {
        var field, _i, _len, _ref1, _results;

        if (!this.formPreRendered) {
          this.fieldOrder.reverse();
          _ref1 = this.fieldOrder;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            field = _ref1[_i];
            _results.push(this.fields[field].$el.prependTo(this.$el));
          }
          return _results;
        }
      };

      FormView.prototype.render = function(callback) {
        var config, field, fields, i, k, reorderFields, runCallback, _i, _len, _ref1, _results,
          _this = this;

        this.fields = {};
        if (this.options.fields) {
          fields = this.options.fields;
        } else {
          fields = [];
          _ref1 = this.model.fieldConfig;
          for (k in _ref1) {
            i = _ref1[k];
            fields.push(k);
          }
        }
        this.fieldOrder = fields;
        reorderFields = _.after(_.keys(fields).length, _.bind(this.reorderFields, this));
        if (callback) {
          runCallback = _.after(_.keys(fields).length, callback);
        }
        _results = [];
        for (_i = 0, _len = fields.length; _i < _len; _i++) {
          field = fields[_i];
          config = this.model.getFieldConfig(field);
          config.property = field;
          if (!config) {
            console.error('field config not found for ' + field);
            break;
          }
          _results.push(FieldFactory.generate(config, function(FieldView) {
            var $el;

            FieldView.model = _this.model;
            field = FieldView.options.property;
            if (_this.options.el) {
              $el = _this.$el.find('[data-field="' + field + '"]');
              if ($el.length) {
                _this.formPreRendered = true;
                FieldView.$el = $el;
                FieldView.el = $el.get(0);
                FieldView.postRender();
                _this.fields[field] = FieldView;
                FieldView.form = _this;
                reorderFields();
                if (runCallback) {
                  runCallback();
                }
                return;
              }
            }
            FieldView.render().appendTo(_this.$el);
            _this.fields[field] = FieldView;
            FieldView.form = _this;
            reorderFields();
            if (runCallback) {
              return runCallback();
            }
          }));
        }
        return _results;
      };

      FormView.prototype.process = function(e) {
        var field, name, validated, _ref1, _ref2;

        if (e) {
          e.preventDefault();
        }
        validated = true;
        _ref1 = this.fields;
        for (name in _ref1) {
          field = _ref1[name];
          if (!field.validate()) {
            validated = false;
          }
        }
        if (validated) {
          _ref2 = this.fields;
          for (name in _ref2) {
            field = _ref2[name];
            field.populateModel();
            field.$el.removeClass('has-error');
          }
          this.model.trigger('change');
          if (this.saveOnProcess) {
            this.model.save();
          }
        }
        return validated;
      };

      return FormView;

    })(Backbone.View);
  });

}).call(this);
