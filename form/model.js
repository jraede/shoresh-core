// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'components/form/formView'], function(Backbone, FormView) {
    var FormModel, _ref;

    return FormModel = (function(_super) {
      __extends(FormModel, _super);

      function FormModel() {
        _ref = FormModel.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      FormModel.prototype.fieldConfig = null;

      FormModel.prototype.formViewClass = FormView;

      FormModel.prototype.getFieldConfig = function(field) {
        return this.fieldConfig[field];
      };

      FormModel.prototype.getErrorMessage = function(fieldName, rule) {
        return "Validation rule " + rule + " failed!";
      };

      /*
      		 * This returns a Form form View object that is either rendered
      		 * completely by itself OR taken from an already generated form (el).
      		 *
      		 * If el is a legit DOM element, we check to see if it contains elements
      		 * with data-field=XXX. Those are assumed to be the container elements
      		 * for each form field. If those do not exist, they are generated
      		 * and appended to the end of el.
      		 *
      		 * If el is not provided, then the form will be generated completely with
      		 * JavaScript and be returned as a subclass of Backbone.View. Then that view's
      		 * element can be placed wherever you need it and the form will be there.
      		 *
      		 * @param { jQuery Object} el The existing element you want to render the form inside
      		 * @param { array} fields The fields you want to include in the form. Leave blank for all 
      		 *                 			fields (except hidden/system ones obviously)
      */


      FormModel.prototype.generateForm = function(el, fields) {
        var form;

        if (el && el.jquery && el.length) {
          console.log('generated with el');
          form = new this.formViewClass({
            el: el.get(0),
            model: this,
            fields: fields
          });
        } else {
          form = new this.formViewClass({
            model: this,
            fields: fields
          });
        }
        return form;
      };

      return FormModel;

    })(Backbone.Model);
  });

}).call(this);
